class  Products::ItemPackProductController < ApplicationController
 
 #fix: paging fixed
 
def program_name?
	"item_pack_product"
end

def bypass_generic_security?
	true
end


def list_item_pack_products
	return if authorise_for_web('item_pack_product','read') == false 

 	if params[:page]!= nil 

 		session[:item_pack_products_page] = params['page']
		 render_list_item_pack_products

		 return 
	else
		session[:item_pack_products_page] = nil
	end

	list_query = "@item_pack_product_pages = Paginator.new self, ItemPackProduct.count, @@page_size,@current_page
	 @item_pack_products = ItemPackProduct.find(:all,
				 :limit => @item_pack_product_pages.items_per_page,
				 :order => 'item_pack_product_code',
				 :offset => @item_pack_product_pages.current.offset)"
	session[:query] = list_query
	render_list_item_pack_products
end

#------------------------------------------------------------------------------
#This method is needed as an intermediary paging controller. The typical paging 
#model code generated by the controller generator, assumes a 'list' method, a
#'render_list' method, an 'edit' method and an 'update_method'. The flow for
#edit actions is typically:
# 1) user press 'list' menu item -> list is generated (list and render_list is used)
# 2) user press a 'page' link (number e.g. 2)-> list method is called, but with a 
#    page parameter (the page parameter is stored in session and render_list is used.
#    the render_list method will get set the @current_page variable to the one stored
#    in session- this variable is used inside the list_query- which generates the list
#    with paging code included. All of this results in the user seeing the page generated
#    on the grid with the page link highlighted (that he/she clicked)
#    At this stage the url of the link will be 'list_x?page =y'
# 3) At some point, the user will select an edit link on one of the rows of the grid representing the currently
#    displayed page 
# 4) the edit_request method will be called
# 5) A form will be rendered
# 6) user fills in the form and submit it, calling the 'update' request method
# 7) the update method will update the record and call the 'render_list_method'
# 8) the render_list_method will re-perform step 2, but this time the paging links will have 
#    its url set to 'update_x?page =y'(because this the web request that generated a list)
# 9) the user re-perform step 2, which result in the update method being called. The places
#    the burden of managing lists and paging on the update method. So the update method
#    simply checks whether it was being called from a paging context or for its 'real' update
#    context. If, from a paging context, it sets the current_page session variable to the params['page']
#    variable(created by Rails) and call the render_list method (step 2)
#    
# ANY WEB METHOD THAT IS CALLED FROM A BROWSER AND THAT RESULTS IN A LIST BEING GENERATED AND THAT
# USES THE RAILS PAGING_LINKS HELPER MUST MANAGE PAGING AS PER STEP 9
# 
# The simplest way to manage paging for 2 step models (edit is 3 step: list,edit,update-> list)
# is to duplicate the 3 step model, by introducing a view_paging_handler:
#  instead of list-view-> we then have list,view,view_paging_handler-> list
#    
#----------------------------------------------------------------------------------------------
def view_paging_handler

  if params[:page]
	session[:item_pack_products_page] = params['page']
  end
  render_list_item_pack_products
end


def view_item_pack_product
    
    
     id = params[:id]
	 if id && @item_pack_product = ItemPackProduct.find(id)
		render :inline => %{
		<% @content_header_caption = "'view item_pack_product'"%> 

		<%= view_item_pack_product(@item_pack_product,"view_paging_handler")%>

		}, :layout => 'content'

	 end



end


def render_list_item_pack_products
    
	
	@can_edit = authorise(program_name?,'edit',session[:user_id])
	@can_delete = authorise(program_name?,'delete',session[:user_id])
	@current_page = session[:item_pack_products_page] if session[:item_pack_products_page]
	
	@current_page = params['page'] if params['page']
	
	@item_pack_products =  eval(session[:query]) if !@item_pack_products
	render :inline => %{
      <% grid            = build_item_pack_product_grid(@item_pack_products,@can_edit,@can_delete) %>
      <% grid.caption    = 'list of all item_pack_products' %>
      <% @header_content = grid.build_grid_data %>

      <% @pagination = pagination_links(@item_pack_product_pages) if @item_pack_product_pages != nil %>
      <%= grid.render_html %>
      <%= grid.render_grid %>
      }, :layout => 'content'
end
 
def search_item_pack_products_flat
	return if authorise_for_web('item_pack_product','read')== false
	@is_flat_search = true 
	render_item_pack_product_search_form
end

def render_item_pack_product_search_form(is_flat_search = nil)
	session[:is_flat_search] = @is_flat_search
#	 render (inline) the search form
	render :inline => %{
		<% @content_header_caption = "'search  item_pack_products'"%> 

		<%= build_item_pack_product_search_form(nil,'submit_item_pack_products_search','submit_item_pack_products_search',@is_flat_search)%>

		}, :layout => 'content'
end
 
def search_item_pack_products_hierarchy
	return if authorise_for_web('item_pack_product','read')== false
 
	@is_flat_search = false 
	render_item_pack_product_search_form(true)
end

def render_item_pack_product_search_form(is_flat_search = nil)
	session[:is_flat_search] = @is_flat_search
#	 render (inline) the search form
	render :inline => %{
		<% @content_header_caption = "'search  item_pack_products'"%> 

		<%= build_item_pack_product_search_form(nil,'submit_item_pack_products_search','submit_item_pack_products_search',@is_flat_search)%>

		}, :layout => 'content'
end
  
def submit_item_pack_products_search
	if params['page']
		session[:item_pack_products_page] =params['page']
	else
		session[:item_pack_products_page] = nil
	end
	@current_page = params['page']
	if params[:page]== nil
		 @item_pack_products = dynamic_search(params[:item_pack_product] ,'item_pack_products','ItemPackProduct',true, nil,'item_pack_product_code')
	else
		@item_pack_products = eval(session[:query])
	end
	if @item_pack_products.length == 0
		if params[:page] == nil
			flash[:notice] = 'no records were found for the query'
			@is_flat_search = session[:is_flat_search].to_s
			render_item_pack_product_search_form
		else
			flash[:notice] = 'There are no more records'
			render_list_item_pack_products
		end

	else

		render_list_item_pack_products
	end
end


def new_item_pack_product
	return if authorise_for_web('item_pack_product','create')== false
		render_new_item_pack_product
end
 
def create_item_pack_product
	 @item_pack_product = ItemPackProduct.new(params[:item_pack_product])
	 if @item_pack_product.save

		 redirect_to_index("'new record created successfully'","'create successful'")
	else
		@is_create_retry = true
		render_new_item_pack_product
	 end
end

def render_new_item_pack_product
#	 render (inline) the edit template
	render :inline => %{
		<% @content_header_caption = "'create new item_pack_product'"%> 

		<%= build_item_pack_product_form(@item_pack_product,'create_item_pack_product','create_item_pack_product',false,@is_create_retry)%>

		}, :layout => 'content'
end
 
def edit_item_pack_product
	return if authorise_for_web('item_pack_product','edit')==false 
	 id = params[:id]
	 if id && @item_pack_product = ItemPackProduct.find(id)
		render_edit_item_pack_product

	 end
end


def render_edit_item_pack_product
#	 render (inline) the edit template
	render :inline => %{
		<% @content_header_caption = "'edit item_pack_product'"%> 

		<%= build_item_pack_product_form(@item_pack_product,'update_item_pack_product','update_item_pack_product',true)%>

		}, :layout => 'content'
end
 
def update_item_pack_product
	if params[:page]
		session[:item_pack_products_page] = params['page']
		render_list_item_pack_products
		return
	end

		@current_page = session[:item_pack_products_page]
	 id = params[:item_pack_product][:id]
	 if id && @item_pack_product = ItemPackProduct.find(id)
		 if @item_pack_product.update_attributes(params[:item_pack_product])
			@item_pack_products = eval(session[:query])
			render_list_item_pack_products
	 else
			 render_edit_item_pack_product

		 end
	 end
 end
 
#	--------------------------------------------------------------------------------
#	 combo_changed event handlers for composite foreign key: marketing_variety_id
#	---------------------------------------------------------------------------------
def item_pack_product_commodity_group_code_changed
   
	commodity_group_code = get_selected_combo_value(params)
	session[:item_pack_product_form][:commodity_group_code_combo_selection] = commodity_group_code
	@commodity_codes = ItemPackProduct.commodity_codes_for_commodity_group_code(commodity_group_code)
#	render (inline) the html to replace the contents of the td that contains the dropdown 
	render :inline => %{
		<%= select('item_pack_product','commodity_code',@commodity_codes)%>
		<img src = '/images/spinner.gif' style = 'display:none;' id = 'img_item_pack_product_commodity_code'/>
		<%= observe_field('item_pack_product_commodity_code',:update => 'basic_pack_code_cell',:url => {:action => 'item_pack_product_commodity_code_changed'},:loading => "show_element('img_item_pack_product_commodity_code');",:complete => session[:item_pack_product_form][:commodity_code_observer][:on_completed_js])%>
		}

end


#def item_pack_product_commodity_code_changed
#	commodity_code = get_selected_combo_value(params)
#	session[:item_pack_product_form][:commodity_code_combo_selection] = commodity_code
#	commodity_group_code = 	session[:item_pack_product_form][:commodity_group_code_combo_selection]
#	@marketing_variety_codes = ItemPackProduct.marketing_variety_codes_for_commodity_code_and_commodity_group_code(commodity_code,commodity_group_code)
##	render (inline) the html to replace the contents of the td that contains the dropdown 
#	render :inline => %{
#		<%= select('item_pack_product','marketing_variety_code',@marketing_variety_codes)%>
#
#		}
#
#end


#	--------------------------------------------------------------------------------
#	 combo_changed event handlers for composite foreign key: standard_size_count_id
#	---------------------------------------------------------------------------------

#
#
#
def item_pack_product_commodity_code_changed
    puts "reached"
	commodity_code = get_selected_combo_value(params)
	session[:item_pack_product_form][:commodity_code_combo_selection] = commodity_code
	@basic_packs = ItemPackProduct.basic_packs_for_commodity_code(commodity_code)
  @size_refs = SizeRef.find_all_by_commodity_code(commodity_code).map{|g|[g.size_ref_code]}
  @size_refs.unshift("<empty>")


	@marketing_variety_codes = MarketingVariety.find_by_sql("Select distinct marketing_variety_code from marketing_varieties where commodity_code = '#{commodity_code}'").map{|g|[g.marketing_variety_code]}
	puts "varieties:" + @marketing_variety_codes.length.to_s
#	render (inline) the html to replace the contents of the td that contains the dropdown 
	render :inline => %{
	  <% m_varieties_content = select('item_pack_product','marketing_variety_code',@marketing_variety_codes) %>
    <% m_size_ref_content = select('item_pack_product','size_ref',@size_refs) %>
		<%= select('item_pack_product','basic_pack_code',@basic_packs)%>
		<img src = '/images/spinner.gif' style = 'display:none;' id = 'img_item_pack_product_basic_pack'/>
		<%= observe_field('item_pack_product_basic_pack_code',:update => 'standard_size_count_value_cell',:url => {:action => session[:item_pack_product_form][:basic_pack_observer][:remote_method]},:loading => "show_element('img_item_pack_product_basic_pack');",:complete => session[:item_pack_product_form][:basic_pack_observer][:on_completed_js])%>
		<script>
		  <%= update_element_function(
        'marketing_variety_code_cell', :action => :update,
        :content => m_varieties_content) %>
        
        <%= update_element_function(
        'size_ref_cell', :action => :update,
        :content => m_size_ref_content) %>
        </script>
		
		}

end



def item_pack_product_basic_pack_changed
	basic_pack = get_selected_combo_value(params)
	session[:item_pack_product_form][:basic_pack_combo_selection] = basic_pack
	commodity_code = 	session[:item_pack_product_form][:commodity_code_combo_selection]
	@std_counts = ItemPackProduct.std_counts_for_basic_pack_and_commodity_code(basic_pack,commodity_code)
#	render (inline) the html to replace the contents of the td that contains the dropdown 
	render :inline => %{
		<%= select('item_pack_product','standard_size_count_value',@std_counts)%>

		}

end


#	--------------------------------------------------------------------------------
#	 combo_changed event handlers for composite foreign key: cosmetic_code_id
#	---------------------------------------------------------------------------------
 
#	-----------------------------------------------------------------------------------------------------------
#	 search combo_changed event handlers for the unique index on this table(item_pack_products)
#	-----------------------------------------------------------------------------------------------------------
def item_pack_product_commodity_code_search_combo_changed
	commodity_code = get_selected_combo_value(params)
	session[:item_pack_product_search_form][:commodity_code_combo_selection] = commodity_code
	@marketing_variety_codes = ItemPackProduct.find_by_sql("Select distinct marketing_variety_code from item_pack_products where commodity_code = '#{commodity_code}'").map{|g|[g.marketing_variety_code]}
	@marketing_variety_codes.unshift("<empty>")

#	render (inline) the html to replace the contents of the td that contains the dropdown 
	render :inline => %{
		<%= select('item_pack_product','marketing_variety_code',@marketing_variety_codes)%>
		<img src = '/images/spinner.gif' style = 'display:none;' id = 'img_item_pack_product_marketing_variety_code'/>
		<%= observe_field('item_pack_product_marketing_variety_code',:update => 'actual_count_cell',:url => {:action => session[:item_pack_product_search_form][:marketing_variety_code_observer][:remote_method]},:loading => "show_element('img_item_pack_product_marketing_variety_code');",:complete => session[:item_pack_product_search_form][:marketing_variety_code_observer][:on_completed_js])%>
		}

end


def item_pack_product_marketing_variety_code_search_combo_changed
	marketing_variety_code = get_selected_combo_value(params)
	session[:item_pack_product_search_form][:marketing_variety_code_combo_selection] = marketing_variety_code
	commodity_code = 	session[:item_pack_product_search_form][:commodity_code_combo_selection]
	@actual_counts = ItemPackProduct.find_by_sql("Select distinct actual_count from item_pack_products where marketing_variety_code = '#{marketing_variety_code}' and commodity_code = '#{commodity_code}'").map{|g|[g.actual_count]}
	@actual_counts.unshift("<empty>")

#	render (inline) the html to replace the contents of the td that contains the dropdown 
	render :inline => %{
		<%= select('item_pack_product','actual_count',@actual_counts)%>
		<img src = '/images/spinner.gif' style = 'display:none;' id = 'img_item_pack_product_actual_count'/>
		<%= observe_field('item_pack_product_actual_count',:update => 'product_class_code_cell',:url => {:action => session[:item_pack_product_search_form][:actual_count_observer][:remote_method]},:loading => "show_element('img_item_pack_product_actual_count');",:complete => session[:item_pack_product_search_form][:actual_count_observer][:on_completed_js])%>
		}

end


def item_pack_product_actual_count_search_combo_changed
	actual_count = get_selected_combo_value(params)
	session[:item_pack_product_search_form][:actual_count_combo_selection] = actual_count
	marketing_variety_code = 	session[:item_pack_product_search_form][:marketing_variety_code_combo_selection]
	commodity_code = 	session[:item_pack_product_search_form][:commodity_code_combo_selection]
	@product_class_codes = ItemPackProduct.find_by_sql("Select distinct product_class_code from item_pack_products where actual_count = '#{actual_count}' and marketing_variety_code = '#{marketing_variety_code}' and commodity_code = '#{commodity_code}'").map{|g|[g.product_class_code]}
	@product_class_codes.unshift("<empty>")

#	render (inline) the html to replace the contents of the td that contains the dropdown 
	render :inline => %{
		<%= select('item_pack_product','product_class_code',@product_class_codes)%>
		<img src = '/images/spinner.gif' style = 'display:none;' id = 'img_item_pack_product_product_class_code'/>
		<%= observe_field('item_pack_product_product_class_code',:update => 'grade_code_cell',:url => {:action => session[:item_pack_product_search_form][:product_class_code_observer][:remote_method]},:loading => "show_element('img_item_pack_product_product_class_code');",:complete => session[:item_pack_product_search_form][:product_class_code_observer][:on_completed_js])%>
		}

end


def item_pack_product_product_class_code_search_combo_changed
	product_class_code = get_selected_combo_value(params)
	session[:item_pack_product_search_form][:product_class_code_combo_selection] = product_class_code
	actual_count = 	session[:item_pack_product_search_form][:actual_count_combo_selection]
	marketing_variety_code = 	session[:item_pack_product_search_form][:marketing_variety_code_combo_selection]
	commodity_code = 	session[:item_pack_product_search_form][:commodity_code_combo_selection]
	@grade_codes = ItemPackProduct.find_by_sql("Select distinct grade_code from item_pack_products where product_class_code = '#{product_class_code}' and actual_count = '#{actual_count}' and marketing_variety_code = '#{marketing_variety_code}' and commodity_code = '#{commodity_code}'").map{|g|[g.grade_code]}
	@grade_codes.unshift("<empty>")

#	render (inline) the html to replace the contents of the td that contains the dropdown 
	render :inline => %{
		<%= select('item_pack_product','grade_code',@grade_codes)%>
		<img src = '/images/spinner.gif' style = 'display:none;' id = 'img_item_pack_product_grade_code'/>
		<%= observe_field('item_pack_product_grade_code',:update => 'cosmetic_code_cell',:url => {:action => session[:item_pack_product_search_form][:grade_code_observer][:remote_method]},:loading => "show_element('img_item_pack_product_grade_code');",:complete => session[:item_pack_product_search_form][:grade_code_observer][:on_completed_js])%>
		}

end


def item_pack_product_grade_code_search_combo_changed
	grade_code = get_selected_combo_value(params)
	session[:item_pack_product_search_form][:grade_code_combo_selection] = grade_code
	product_class_code = 	session[:item_pack_product_search_form][:product_class_code_combo_selection]
	actual_count = 	session[:item_pack_product_search_form][:actual_count_combo_selection]
	marketing_variety_code = 	session[:item_pack_product_search_form][:marketing_variety_code_combo_selection]
	commodity_code = 	session[:item_pack_product_search_form][:commodity_code_combo_selection]
	@cosmetic_codes = ItemPackProduct.find_by_sql("Select distinct cosmetic_code from item_pack_products where grade_code = '#{grade_code}' and product_class_code = '#{product_class_code}' and actual_count = '#{actual_count}' and marketing_variety_code = '#{marketing_variety_code}' and commodity_code = '#{commodity_code}'").map{|g|[g.cosmetic_code]}
	@cosmetic_codes.unshift("<empty>")

#	render (inline) the html to replace the contents of the td that contains the dropdown 
	render :inline => %{
		<%= select('item_pack_product','cosmetic_code',@cosmetic_codes)%>

		}

end



end
